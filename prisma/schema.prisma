// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int @id @default(autoincrement())
  name     String
  surname String @default("")
  promocode String @default("")
  login    String @unique
  email    String @unique
  referralCode String @unique
  password String

  exp Float @default(0)
  curLevelExp Float @default(0)
  expMonthCount Float @default(0)

  level Int @default(1)
  earningBonus Float @default(0)
  levelBonusTaken Int @default(0)

  tokensAll Int @default(0)
  curTokens Int @default(0)
  bonusStreak Int @default(0)
  bonusLastTaken String @default("") 
  faucetClaimed String @default("")
  faucetClaimedCount Int @default(0)

  ptcCount Int @default(0)
  ptcMonthCount Int @default(0)
  ptcDayCount Int @default(0)
  ptcChallengesClaimed Int @default(0)

  linksCount Int @default(0)
  linksMonthCount Int @default(0)
  linksDayCount Int @default(0)
  linksChallengesClaimed Int @default(0)

  faucetCount Int @default(0)
  faucetMonthCount Int @default(0)
  faucetDayCount Int @default(0)
  faucetChallengesClaimed Int @default(0)

  offerwallCount Int @default(0)
  offerwallDayCount Int @default(0)
  offerwallMonthCount Int @default(0)
  offerwallChallengesClaimed Int @default(0)

  rtHash String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referrals ReferralInfo[]

  ptcClaims PtcClaimed[]
  
  @@map("users")
}

model ReferralInfo {
  id Int @id @default(autoincrement())
  earnedCoins Int @default(0)
  referralUserId Int
  referralUserName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Rating {
  id Int @id @default(autoincrement())

  companyName String
  curRating Int
  ratings Int[]
  userIds Int[]
}

model LinkInfo {
  id Int @id @default(autoincrement())

  userIp String
  linkName String
  linkClickCount Int

  lastClicked String @default("")
}

model Task {
  id Int @id @default(autoincrement())

  title String 
  description String
  timeMinutes Int 
  tokensReward Int
  instruction String
  interval Int @default(0)

  taskApproves TaskApprove[]
}

model TaskApprove {
  id Int @id @default(autoincrement())
  userId Int
  isApproved Boolean @default(false)
  sent DateTime @default(now())
  dopInfo String?

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int

  files TaskApproveImg[]
}

model TaskApproveImg {
  id Int @id @default(autoincrement())

  fileUrl String

  task TaskApprove @relation(fields: [taskApproveId], references: [id], onDelete: Cascade)
  taskApproveId Int
}

model Ptc {
  id Int @id @default(autoincrement())

  title String
  link String
  description String @default("")
  tokensReward Int
  expReward Int
  secondsWait Int
  ptcType String
  viewsCount Int @default(0)
  viewsTotal Int
  interval Int

  ptcClaims PtcClaimed[]
}

model PtcClaimed {
  id Int @id @default(autoincrement())

  lastTaken String

  ptc Ptc @relation(fields: [ptcId], references: [id], onDelete: Cascade)
  ptcId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}


model LeadersGeneral {
  id Int @id @default(autoincrement())

  tablesResetMonth Int
}

model File {
  id Int @id @default(autoincrement())

  title String 
  description String
  tokensReward Int
  expReward Int
  timeToComplete Int
  link String

  approves FileApprove[]
}

model FileApprove {
  id Int @id @default(autoincrement())
  userId Int
  isApproved Boolean @default(false)

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId Int

  files FileApproveImg[]
}

model FileApproveImg {
  id Int @id @default(autoincrement())

  fileUrl String

  file FileApprove @relation(fields: [fileApproveId], references: [id], onDelete: Cascade)
  fileApproveId Int
}

model Article {
  id Int @id @default(autoincrement())

  title String
  description String
  text String
  createdAt DateTime @default(now())

  imgs ArticleImg[]
  views UserArticleSeen[]
}

model ArticleImg {
  id Int @id @default(autoincrement())

  fileUrl String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}

model UserArticleSeen {
  id Int @id @default(autoincrement())

  userId Int

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}